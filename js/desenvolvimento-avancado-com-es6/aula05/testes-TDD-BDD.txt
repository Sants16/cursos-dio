* | TESTES AUTOMATIZADOS |
? Testes unitários, servem para testar a melhor parte do nosso código, teste de pequenas unidades
! EX: Testar o comportamento de uma função ou de um componente React
? Testes integrados, servem para testar a integração das pequenas partes que testamos anteriormente com os testes unitários, integrar partes do seu próprio código em conjunto
! EX: Testar um componente React junto com outro componente, testar como uma função se comporta com outra função
? Testes funcionais/end-to-end, servem para testar a integração do nosso sistema com outros sistemas, testa uma funcionalidade de ponta a ponta, pode ser chamado como teste blackbox/caixa preta porque testamos como usuário ou consumidor de um serviço
! EX: Testamos o sistema como um usuário sem se importar com as tecnologias usadas no projeto, por exemplo preenchendo formulários afim de validar que uma funcionalidade esta ok



* | TDD |
! Test Driven Development
? É um dos pilares do Extreme Programming, consiste em testar e refatorar em pequenos ciclos, onde você escreve o teste antes do código, faz o mesmo passar e refatora o código

* ETAPAS:
? Escrita do teste
? Escrita do código
? Refatoração

* VANTAGENS:
? Feedback rápido
? Maior segurança em alterações e novas funcionalidades
? Código mais limpo
? Produtividade


* | BDD |
! Behavior Driven Development
? Técnica de desenvolvimento ágil que visa integrar regras de negócio com linguagens de programação

* PILARES:
? Testes
? Documentação
? Exemplos

* VANTAGENS
? Compartilhando de conhecimento
? Documentação dinâmica
? Visão de todo